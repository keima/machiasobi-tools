// generated by qbg ; DO NOT EDIT

package calendar

import (
	"github.com/favclip/qbg/qbgutils"
	"google.golang.org/appengine/datastore"
)

// CalendarItemQueryBuilder build query for CalendarItem.
type CalendarItemQueryBuilder struct {
	q          *datastore.Query
	plugin     qbgutils.Plugin
	Id         *CalendarItemQueryProperty
	Name       *CalendarItemQueryProperty
	CalendarId *CalendarItemQueryProperty
	IsSticky   *CalendarItemQueryProperty
	Order      *CalendarItemQueryProperty
	Enabled    *CalendarItemQueryProperty
}

// CalendarItemQueryProperty has property information for CalendarItemQueryBuilder.
type CalendarItemQueryProperty struct {
	bldr *CalendarItemQueryBuilder
	name string
}

// NewCalendarItemQueryBuilder create new CalendarItemQueryBuilder.
func NewCalendarItemQueryBuilder() *CalendarItemQueryBuilder {
	q := datastore.NewQuery("CalendarItem")
	bldr := &CalendarItemQueryBuilder{q: q}
	bldr.Id = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "__key__",
	}
	bldr.Name = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "Name",
	}
	bldr.CalendarId = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "CalendarId",
	}
	bldr.IsSticky = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "IsSticky",
	}
	bldr.Order = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "Order",
	}
	bldr.Enabled = &CalendarItemQueryProperty{
		bldr: bldr,
		name: "Enabled",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("CalendarItem")
	}
	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *CalendarItemQueryBuilder) Ancestor(parentKey *datastore.Key) *CalendarItemQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *CalendarItemQueryBuilder) KeysOnly() *CalendarItemQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *CalendarItemQueryBuilder) Start(cur datastore.Cursor) *CalendarItemQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setupto query.
func (bldr *CalendarItemQueryBuilder) Offset(offset int) *CalendarItemQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *CalendarItemQueryBuilder) Limit(limit int) *CalendarItemQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *CalendarItemQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *CalendarItemQueryProperty) Filter(op string, value interface{}) *CalendarItemQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *CalendarItemQueryProperty) LessThanOrEqual(value interface{}) *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *CalendarItemQueryProperty) GreaterThanOrEqual(value interface{}) *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *CalendarItemQueryProperty) LessThan(value interface{}) *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *CalendarItemQueryProperty) GreaterThan(value interface{}) *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *CalendarItemQueryProperty) Equal(value interface{}) *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *CalendarItemQueryProperty) Asc() *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *CalendarItemQueryProperty) Desc() *CalendarItemQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
