// generated by qbg ; DO NOT EDIT

package menu

import (
	"github.com/favclip/qbg/qbgutils"
	"google.golang.org/appengine/datastore"
)

// MenuItemQueryBuilder build query for MenuItem.
type MenuItemQueryBuilder struct {
	q           *datastore.Query
	plugin      qbgutils.Plugin
	Id          *MenuItemQueryProperty
	Name        *MenuItemQueryProperty
	IconId      *MenuItemQueryProperty
	State       *MenuItemQueryProperty
	Description *MenuItemQueryProperty
	Enabled     *MenuItemQueryProperty
}

// MenuItemQueryProperty has property information for MenuItemQueryBuilder.
type MenuItemQueryProperty struct {
	bldr *MenuItemQueryBuilder
	name string
}

// NewMenuItemQueryBuilder create new MenuItemQueryBuilder.
func NewMenuItemQueryBuilder() *MenuItemQueryBuilder {
	q := datastore.NewQuery("MenuItem")
	bldr := &MenuItemQueryBuilder{q: q}
	bldr.Id = &MenuItemQueryProperty{
		bldr: bldr,
		name: "__key__",
	}
	bldr.Name = &MenuItemQueryProperty{
		bldr: bldr,
		name: "Name",
	}
	bldr.IconId = &MenuItemQueryProperty{
		bldr: bldr,
		name: "IconId",
	}
	bldr.State = &MenuItemQueryProperty{
		bldr: bldr,
		name: "State",
	}
	bldr.Description = &MenuItemQueryProperty{
		bldr: bldr,
		name: "Description",
	}
	bldr.Enabled = &MenuItemQueryProperty{
		bldr: bldr,
		name: "Enabled",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("MenuItem")
	}
	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *MenuItemQueryBuilder) Ancestor(parentKey *datastore.Key) *MenuItemQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *MenuItemQueryBuilder) KeysOnly() *MenuItemQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *MenuItemQueryBuilder) Start(cur datastore.Cursor) *MenuItemQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setupto query.
func (bldr *MenuItemQueryBuilder) Offset(offset int) *MenuItemQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *MenuItemQueryBuilder) Limit(limit int) *MenuItemQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *MenuItemQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *MenuItemQueryProperty) Filter(op string, value interface{}) *MenuItemQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *MenuItemQueryProperty) LessThanOrEqual(value interface{}) *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *MenuItemQueryProperty) GreaterThanOrEqual(value interface{}) *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *MenuItemQueryProperty) LessThan(value interface{}) *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *MenuItemQueryProperty) GreaterThan(value interface{}) *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *MenuItemQueryProperty) Equal(value interface{}) *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *MenuItemQueryProperty) Asc() *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *MenuItemQueryProperty) Desc() *MenuItemQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
